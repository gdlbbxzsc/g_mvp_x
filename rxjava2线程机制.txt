******检索顺序很重要,懂了这个其他的试一下也就知道了******
1.从subscribe方法开始由下至上检索subscribeOn方法和受其影响的操作符(doOnSubscribe,doFinally)。
  再由上至下检索observeOn方法和受其影响的操作符(doFinally,其余操作符)。
2.subscribeOn设定的线程影响所有操作符,observeOn设定的线程只影响特定操作符但优先级更高。
3.以subscribeOn为“分隔符”分隔所有“控制操作符”为一个“单位组”，按检索顺序入队执行“单位组”。
  每个“单位组”中doOnSubscribe按检索顺序入栈执行。
  每个subscribeOn只能影响检索顺序后的操作符。
  存在默认subscribeOn(当前线程)。
4.以observeOn为“分隔符”分隔所有“控制操作符”为一个“单位组”，按检索顺序入队执行“单位组”。
  每个“单位组”中的所有操作符(doFinally除外)按队列执行，所有doFinally在该单位组中最后按顺序执行。
  每个observeOn只能影响检索顺序后的操作符。
  存在默认observeOn(检索顺序上一个subscribeOn线程)。
5.最后一个observeOn方法后的doFinally才在subscribe之后执行，其他的都在其所在“单位组”中最后执行。
6.doFinally受两个操控影响，情况比较特殊。
  1）正常情况规则如上
  特殊情况：
  2）在某个doOnSubscribe中dispose结束线程，首先其后的任何单位组都不会被执行。
     其次，只有同一单位组中按检索顺序dispose后的doFinally会按照入栈顺序执行，其他都不会被执行

建议：
1.代码习惯：要按检索顺序在受影响操作符前调用对应的subscribeOn和observeOn。且不要用默认subscribeOn和observeOn。
2.如无必要，勿增subscribeOn
3.代码习惯：要按由下至上顺序顺序先写subscribeOn->doOnSubscribe->其他操作符->doFinally->observeOn这样。
  例如：        Observable.just(0)

                     .observeOn(Schedulers.io())
                     .doFinally(() ->{})
                     .doOnNext(integer -> {})
                     .doOnSubscribe(disposable -> {})
                     .subscribeOn(Schedulers.io())

                     .observeOn(Schedulers.io())
                     .doFinally(() ->{})
                     .doOnNext(integer -> {})
                     .doOnSubscribe(disposable -> {})
                     .subscribeOn(Schedulers.io())

                     .subscribe(integer -> {});